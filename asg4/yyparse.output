Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_DECLID
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_INDEX
   TOK_NEWSTRING
   TOK_RETURNVOID
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_VARDECL
   TOK_PROTOTYPE
   NEG
   POS


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program statement
    4        | program error '}'
    5        | program error ']'
    6        | /* empty */

    7 structdef: structhead '}'

    8 structhead: structhead fielddecl ';'
    9           | TOK_STRUCT TOK_IDENT '{'

   10 fielddecl: basetype TOK_ARRAY TOK_IDENT
   11          | basetype TOK_IDENT

   12 basetype: TOK_VOID
   13         | TOK_BOOL
   14         | TOK_CHAR
   15         | TOK_INT
   16         | TOK_STRING
   17         | TOK_IDENT

   18 function: identdecl '(' ')' ';'
   19         | identdecl '(' ')' block
   20         | identdecl params ')' ';'
   21         | identdecl params ')' block

   22 params: params ',' identdecl
   23       | '(' identdecl

   24 identdecl: basetype TOK_ARRAY TOK_IDENT
   25          | basetype TOK_IDENT

   26 block: blockhead '}'

   27 blockhead: blockhead statement
   28          | '{'

   29 statement: block
   30          | vardecl
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'
   35          | ';'

   36 vardecl: identdecl '=' expr ';'

   37 while: TOK_WHILE '(' expr ')' statement

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   39       | TOK_IF '(' expr ')' statement

   40 return: TOK_RETURN ';'
   41       | TOK_RETURN expr ';'

   42 expr: binop
   43     | unop
   44     | allocator
   45     | call
   46     | '(' expr ')'
   47     | variable
   48     | constant

   49 binop: expr '+' expr
   50      | expr '-' expr
   51      | expr '*' expr
   52      | expr '/' expr
   53      | expr '%' expr
   54      | expr '=' expr
   55      | expr TOK_EQ expr
   56      | expr TOK_NE expr
   57      | expr TOK_LT expr
   58      | expr TOK_LE expr
   59      | expr TOK_GT expr
   60      | expr TOK_GE expr

   61 unop: '+' expr
   62     | '-' expr
   63     | '!' expr
   64     | TOK_ORD expr
   65     | TOK_CHR expr

   66 allocator: TOK_NEW TOK_IDENT '(' ')'
   67          | TOK_NEW TOK_STRING '(' expr ')'
   68          | TOK_NEW basetype '[' expr ']'

   69 call: TOK_IDENT '(' ')'
   70     | args ')'

   71 args: TOK_IDENT '(' expr
   72     | args ',' expr

   73 variable: TOK_IDENT
   74         | expr '[' expr ']'
   75         | expr '.' TOK_IDENT

   76 constant: TOK_INTCON
   77         | TOK_CHARCON
   78         | TOK_STRINGCON
   79         | TOK_FALSE
   80         | TOK_TRUE
   81         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 63
'%' (37) 53
'(' (40) 18 19 23 37 38 39 46 66 67 69 71
')' (41) 18 19 20 21 37 38 39 46 66 67 69 70
'*' (42) 51
'+' (43) 49 61
',' (44) 22 72
'-' (45) 50 62
'.' (46) 75
'/' (47) 52
';' (59) 8 18 20 34 35 36 40 41
'=' (61) 36 54
'[' (91) 68 74
']' (93) 5 68 74
'{' (123) 9 28
'}' (125) 4 7 26
error (256) 4 5
TOK_VOID (258) 12
TOK_BOOL (259) 13
TOK_CHAR (260) 14
TOK_INT (261) 15
TOK_STRING (262) 16 67
TOK_IF (263) 38 39
TOK_ELSE (264) 38
TOK_WHILE (265) 37
TOK_RETURN (266) 40 41
TOK_STRUCT (267) 9
TOK_FALSE (268) 79
TOK_TRUE (269) 80
TOK_NULL (270) 81
TOK_NEW (271) 66 67 68
TOK_ARRAY (272) 10 24
TOK_EQ (273) 55
TOK_NE (274) 56
TOK_LT (275) 57
TOK_LE (276) 58
TOK_GT (277) 59
TOK_GE (278) 60
TOK_IDENT (279) 9 10 11 17 24 25 66 69 71 73 75
TOK_INTCON (280) 76
TOK_CHARCON (281) 77
TOK_STRINGCON (282) 78
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_DECLID (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292) 64
TOK_CHR (293) 65
TOK_ROOT (294)
TOK_INDEX (295)
TOK_NEWSTRING (296)
TOK_RETURNVOID (297)
TOK_FUNCTION (298)
TOK_PARAMLIST (299)
TOK_VARDECL (300)
TOK_PROTOTYPE (301)
"then" (302)
NEG (303)
POS (304)


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
program (67)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
structdef (68)
    on left: 7, on right: 1
structhead (69)
    on left: 8 9, on right: 7 8
fielddecl (70)
    on left: 10 11, on right: 8
basetype (71)
    on left: 12 13 14 15 16 17, on right: 10 11 24 25 68
function (72)
    on left: 18 19 20 21, on right: 2
params (73)
    on left: 22 23, on right: 20 21 22
identdecl (74)
    on left: 24 25, on right: 18 19 20 21 22 23 36
block (75)
    on left: 26, on right: 19 21 29
blockhead (76)
    on left: 27 28, on right: 26 27
statement (77)
    on left: 29 30 31 32 33 34 35, on right: 3 27 37 38 39
vardecl (78)
    on left: 36, on right: 30
while (79)
    on left: 37, on right: 31
ifelse (80)
    on left: 38 39, on right: 32
return (81)
    on left: 40 41, on right: 33
expr (82)
    on left: 42 43 44 45 46 47 48, on right: 34 36 37 38 39 41 46 49
    50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 71 72 74
    75
binop (83)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60, on right: 42
unop (84)
    on left: 61 62 63 64 65, on right: 43
allocator (85)
    on left: 66 67 68, on right: 44
call (86)
    on left: 69 70, on right: 45
args (87)
    on left: 71 72, on right: 70 72
variable (88)
    on left: 73 74 75, on right: 47
constant (89)
    on left: 76 77 78 79 80 81, on right: 48


state 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


state 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . statement
    4        | program . error '}'
    5        | program . error ']'

    $end           shift, and go to state 2
    error          shift, and go to state 3
    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    structdef   go to state 29
    structhead  go to state 30
    basetype    go to state 31
    function    go to state 32
    identdecl   go to state 33
    block       go to state 34
    blockhead   go to state 35
    statement   go to state 36
    vardecl     go to state 37
    while       go to state 38
    ifelse      go to state 39
    return      go to state 40
    expr        go to state 41
    binop       go to state 42
    unop        go to state 43
    allocator   go to state 44
    call        go to state 45
    args        go to state 46
    variable    go to state 47
    constant    go to state 48


state 2

    0 $accept: program $end .

    $default  accept


state 3

    4 program: program error . '}'
    5        | program error . ']'

    ']'  shift, and go to state 49
    '}'  shift, and go to state 50


state 4

   12 basetype: TOK_VOID .

    $default  reduce using rule 12 (basetype)


state 5

   13 basetype: TOK_BOOL .

    $default  reduce using rule 13 (basetype)


state 6

   14 basetype: TOK_CHAR .

    $default  reduce using rule 14 (basetype)


state 7

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


state 8

   16 basetype: TOK_STRING .

    $default  reduce using rule 16 (basetype)


state 9

   38 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   39       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 51


state 10

   37 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 52


state 11

   40 return: TOK_RETURN . ';'
   41       | TOK_RETURN . expr ';'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 54

    expr       go to state 55
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 12

    9 structhead: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 56


state 13

   79 constant: TOK_FALSE .

    $default  reduce using rule 79 (constant)


state 14

   80 constant: TOK_TRUE .

    $default  reduce using rule 80 (constant)


state 15

   81 constant: TOK_NULL .

    $default  reduce using rule 81 (constant)


state 16

   66 allocator: TOK_NEW . TOK_IDENT '(' ')'
   67          | TOK_NEW . TOK_STRING '(' expr ')'
   68          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 57
    TOK_IDENT   shift, and go to state 58

    basetype  go to state 59


state 17

   17 basetype: TOK_IDENT .
   69 call: TOK_IDENT . '(' ')'
   71 args: TOK_IDENT . '(' expr
   73 variable: TOK_IDENT .

    '('  shift, and go to state 60

    TOK_ARRAY  reduce using rule 17 (basetype)
    TOK_IDENT  reduce using rule 17 (basetype)
    $default   reduce using rule 73 (variable)


state 18

   76 constant: TOK_INTCON .

    $default  reduce using rule 76 (constant)


state 19

   77 constant: TOK_CHARCON .

    $default  reduce using rule 77 (constant)


state 20

   78 constant: TOK_STRINGCON .

    $default  reduce using rule 78 (constant)


state 21

   64 unop: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 61
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 22

   65 unop: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 62
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 23

   61 unop: '+' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 63
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 24

   62 unop: '-' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 64
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 25

   63 unop: '!' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 65
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 26

   46 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 66
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 27

   35 statement: ';' .

    $default  reduce using rule 35 (statement)


state 28

   28 blockhead: '{' .

    $default  reduce using rule 28 (blockhead)


state 29

    1 program: program structdef .

    $default  reduce using rule 1 (program)


state 30

    7 structdef: structhead . '}'
    8 structhead: structhead . fielddecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 67
    '}'         shift, and go to state 68

    fielddecl  go to state 69
    basetype   go to state 70


state 31

   24 identdecl: basetype . TOK_ARRAY TOK_IDENT
   25          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 71
    TOK_IDENT  shift, and go to state 72


state 32

    2 program: program function .

    $default  reduce using rule 2 (program)


state 33

   18 function: identdecl . '(' ')' ';'
   19         | identdecl . '(' ')' block
   20         | identdecl . params ')' ';'
   21         | identdecl . params ')' block
   36 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 73
    '('  shift, and go to state 74

    params  go to state 75


state 34

   29 statement: block .

    $default  reduce using rule 29 (statement)


state 35

   26 block: blockhead . '}'
   27 blockhead: blockhead . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 76
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 77
    block      go to state 34
    blockhead  go to state 35
    statement  go to state 78
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 36

    3 program: program statement .

    $default  reduce using rule 3 (program)


state 37

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


state 38

   31 statement: while .

    $default  reduce using rule 31 (statement)


state 39

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


state 40

   33 statement: return .

    $default  reduce using rule 33 (statement)


state 41

   34 statement: expr . ';'
   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ';'     shift, and go to state 93


state 42

   42 expr: binop .

    $default  reduce using rule 42 (expr)


state 43

   43 expr: unop .

    $default  reduce using rule 43 (expr)


state 44

   44 expr: allocator .

    $default  reduce using rule 44 (expr)


state 45

   45 expr: call .

    $default  reduce using rule 45 (expr)


state 46

   70 call: args . ')'
   72 args: args . ',' expr

    ')'  shift, and go to state 94
    ','  shift, and go to state 95


state 47

   47 expr: variable .

    $default  reduce using rule 47 (expr)


state 48

   48 expr: constant .

    $default  reduce using rule 48 (expr)


state 49

    5 program: program error ']' .

    $default  reduce using rule 5 (program)


state 50

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


state 51

   38 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   39       | TOK_IF '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 96
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 52

   37 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 97
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 53

   69 call: TOK_IDENT . '(' ')'
   71 args: TOK_IDENT . '(' expr
   73 variable: TOK_IDENT .

    '('  shift, and go to state 60

    $default  reduce using rule 73 (variable)


state 54

   40 return: TOK_RETURN ';' .

    $default  reduce using rule 40 (return)


state 55

   41 return: TOK_RETURN expr . ';'
   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ';'     shift, and go to state 98


state 56

    9 structhead: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 99


state 57

   16 basetype: TOK_STRING .
   67 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 100

    $default  reduce using rule 16 (basetype)


state 58

   17 basetype: TOK_IDENT .
   66 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 101

    $default  reduce using rule 17 (basetype)


state 59

   68 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 102


state 60

   69 call: TOK_IDENT '(' . ')'
   71 args: TOK_IDENT '(' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ')'            shift, and go to state 103

    expr       go to state 104
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 61

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   64 unop: TOK_ORD expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 64 (unop)


state 62

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   65 unop: TOK_CHR expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 65 (unop)


state 63

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   61 unop: '+' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 61 (unop)


state 64

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   62 unop: '-' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 62 (unop)


state 65

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   63 unop: '!' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 63 (unop)


state 66

   46 expr: '(' expr . ')'
   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    ')'     shift, and go to state 105
    '['     shift, and go to state 91
    '.'     shift, and go to state 92


state 67

   17 basetype: TOK_IDENT .

    $default  reduce using rule 17 (basetype)


state 68

    7 structdef: structhead '}' .

    $default  reduce using rule 7 (structdef)


state 69

    8 structhead: structhead fielddecl . ';'

    ';'  shift, and go to state 106


state 70

   10 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   11          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 107
    TOK_IDENT  shift, and go to state 108


state 71

   24 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 109


state 72

   25 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


state 73

   36 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 110
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 74

   18 function: identdecl '(' . ')' ';'
   19         | identdecl '(' . ')' block
   23 params: '(' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 67
    ')'         shift, and go to state 111

    basetype   go to state 31
    identdecl  go to state 112


state 75

   20 function: identdecl params . ')' ';'
   21         | identdecl params . ')' block
   22 params: params . ',' identdecl

    ')'  shift, and go to state 113
    ','  shift, and go to state 114


state 76

   26 block: blockhead '}' .

    $default  reduce using rule 26 (block)


state 77

   36 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 73


state 78

   27 blockhead: blockhead statement .

    $default  reduce using rule 27 (blockhead)


state 79

   55 binop: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 115
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 80

   56 binop: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 116
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 81

   57 binop: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 117
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 82

   58 binop: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 118
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 83

   59 binop: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 119
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 84

   60 binop: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 120
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 85

   54 binop: expr '=' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 121
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 86

   49 binop: expr '+' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 122
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 87

   50 binop: expr '-' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 123
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 88

   51 binop: expr '*' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 124
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 89

   52 binop: expr '/' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 125
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 90

   53 binop: expr '%' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 126
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 91

   74 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 127
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 92

   75 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 128


state 93

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


state 94

   70 call: args ')' .

    $default  reduce using rule 70 (call)


state 95

   72 args: args ',' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 129
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 96

   38 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   39       | TOK_IF '(' expr . ')' statement
   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    ')'     shift, and go to state 130
    '['     shift, and go to state 91
    '.'     shift, and go to state 92


state 97

   37 while: TOK_WHILE '(' expr . ')' statement
   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    ')'     shift, and go to state 131
    '['     shift, and go to state 91
    '.'     shift, and go to state 92


state 98

   41 return: TOK_RETURN expr ';' .

    $default  reduce using rule 41 (return)


state 99

    9 structhead: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 9 (structhead)


state 100

   67 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 132
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 101

   66 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 133


state 102

   68 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 134
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 103

   69 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 69 (call)


state 104

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   71 args: TOK_IDENT '(' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    $default  reduce using rule 71 (args)


state 105

   46 expr: '(' expr ')' .

    $default  reduce using rule 46 (expr)


state 106

    8 structhead: structhead fielddecl ';' .

    $default  reduce using rule 8 (structhead)


state 107

   10 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 135


state 108

   11 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


state 109

   24 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


state 110

   36 vardecl: identdecl '=' expr . ';'
   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ';'     shift, and go to state 136


state 111

   18 function: identdecl '(' ')' . ';'
   19         | identdecl '(' ')' . block

    ';'  shift, and go to state 137
    '{'  shift, and go to state 28

    block      go to state 138
    blockhead  go to state 35


state 112

   23 params: '(' identdecl .

    $default  reduce using rule 23 (params)


state 113

   20 function: identdecl params ')' . ';'
   21         | identdecl params ')' . block

    ';'  shift, and go to state 139
    '{'  shift, and go to state 28

    block      go to state 140
    blockhead  go to state 35


state 114

   22 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 67

    basetype   go to state 31
    identdecl  go to state 141


state 115

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   55      | expr TOK_EQ expr .
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 55 (binop)


state 116

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   56      | expr TOK_NE expr .
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 56 (binop)


state 117

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   57      | expr TOK_LT expr .
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 57 (binop)


state 118

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   58      | expr TOK_LE expr .
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 58 (binop)


state 119

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   59      | expr TOK_GT expr .
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 59 (binop)


state 120

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   60      | expr TOK_GE expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 60 (binop)


state 121

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   54      | expr '=' expr .
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    $default  reduce using rule 54 (binop)


state 122

   49 binop: expr . '+' expr
   49      | expr '+' expr .
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 49 (binop)


state 123

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   50      | expr '-' expr .
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 50 (binop)


state 124

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   51      | expr '*' expr .
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 51 (binop)


state 125

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   52      | expr '/' expr .
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 52 (binop)


state 126

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   53      | expr '%' expr .
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 53 (binop)


state 127

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   74 variable: expr . '[' expr ']'
   74         | expr '[' expr . ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    ']'     shift, and go to state 142
    '.'     shift, and go to state 92


state 128

   75 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 75 (variable)


state 129

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   72 args: args ',' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    $default  reduce using rule 72 (args)


state 130

   38 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   39       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 77
    block      go to state 34
    blockhead  go to state 35
    statement  go to state 143
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 131

   37 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 77
    block      go to state 34
    blockhead  go to state 35
    statement  go to state 144
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 132

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   67 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    ')'     shift, and go to state 145
    '['     shift, and go to state 91
    '.'     shift, and go to state 92


state 133

   66 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 66 (allocator)


state 134

   49 binop: expr . '+' expr
   50      | expr . '-' expr
   51      | expr . '*' expr
   52      | expr . '/' expr
   53      | expr . '%' expr
   54      | expr . '=' expr
   55      | expr . TOK_EQ expr
   56      | expr . TOK_NE expr
   57      | expr . TOK_LT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_GE expr
   68 allocator: TOK_NEW basetype '[' expr . ']'
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    ']'     shift, and go to state 146
    '.'     shift, and go to state 92


state 135

   10 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 10 (fielddecl)


state 136

   36 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 36 (vardecl)


state 137

   18 function: identdecl '(' ')' ';' .

    $default  reduce using rule 18 (function)


state 138

   19 function: identdecl '(' ')' block .

    $default  reduce using rule 19 (function)


state 139

   20 function: identdecl params ')' ';' .

    $default  reduce using rule 20 (function)


state 140

   21 function: identdecl params ')' block .

    $default  reduce using rule 21 (function)


state 141

   22 params: params ',' identdecl .

    $default  reduce using rule 22 (params)


state 142

   74 variable: expr '[' expr ']' .

    $default  reduce using rule 74 (variable)


state 143

   38 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   39       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 147

    $default  reduce using rule 39 (ifelse)


state 144

   37 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 37 (while)


state 145

   67 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 67 (allocator)


state 146

   68 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 68 (allocator)


state 147

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 77
    block      go to state 34
    blockhead  go to state 35
    statement  go to state 148
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    args       go to state 46
    variable   go to state 47
    constant   go to state 48


state 148

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 38 (ifelse)
